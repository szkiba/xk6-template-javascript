// Code generated by tygor; DO NOT EDIT.

// ˮsummaryˮ
package ˮgoPackageˮ

import (
	"errors"
	"fmt"
	"github.com/dop251/goja"
	"go.k6.io/k6/js/modules"
	"time"
)

// k6Module represents k6 JavaScript extension module.
type k6Module struct {
	goModuleConstructor goModuleConstructor
}

// NewModuleInstance creates new per VU module instance.
func (m *k6Module) NewModuleInstance(vu modules.VU) modules.Instance {
	mi := new(k6ModuleInstance)
	adaptee := m.goModuleConstructor(vu)
	adapter := jsModuleFrom(adaptee)

	vm := vu.Runtime()

	dict := make(map[string]interface{})

	dict["ˮPrimaryClassˮ"] = vm.ToValue(newˮPrimaryClassˮConstructor(adaptee.newˮPrimaryClassˮ))

	mi.exports.Named = dict

	obj := adapter.defaultˮPrimaryClassˮGetter(goja.FunctionCall{This: goja.Undefined()}, vm).ToObject(vm)

	mi.exports.Default = obj

	return mi
}

// register registers k6 JavaScript extension module.
func register(ctor goModuleConstructor) {
	m := new(k6Module)
	m.goModuleConstructor = ctor
	modules.Register("k6/x/ˮnameˮ", m)
}

// k6ModuleInstance represents per VU module instance.
type k6ModuleInstance struct {
	exports modules.Exports
}

// Exports returns exported symbols.
func (mi *k6ModuleInstance) Exports() modules.Exports {
	return mi.exports
}

// jsModule is the go binding for the JavaScript Module type.
//
// TSDoc:
// ˮsummaryˮ
type jsModule interface {
	// defaultˮPrimaryClassˮGetter is the go getter binding for the JavaScript defaultˮPrimaryClassˮ property.
	//
	// TSDoc:
	// Default ˮPrimaryClassˮ instance.
	defaultˮPrimaryClassˮGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// jsModuleAdapter converts goModule to jsModule.
type jsModuleAdapter struct {
	adaptee goModule
}

var _ jsModule = (*jsModuleAdapter)(nil)

// defaultˮPrimaryClassˮGetter is a jsModule property getter adapter method.
func (self *jsModuleAdapter) defaultˮPrimaryClassˮGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.defaultˮPrimaryClassˮGetter()
	if err != nil {
		panic(err)
	}

	return goˮPrimaryClassˮToObject(v, vm)
}

// jsModuleFrom returns a jsModule based on a goModule.
func jsModuleFrom(adaptee goModule) jsModule {
	return &jsModuleAdapter{adaptee: adaptee}
}

// goModule is the go representation of the JavaScript Module type.
//
// TSDoc:
// ˮsummaryˮ
type goModule interface {
	// newˮPrimaryClassˮ is the go factory method for the ˮPrimaryClassˮ type.
	newˮPrimaryClassˮ(nameArg string) (goˮPrimaryClassˮ, error)

	// defaultˮPrimaryClassˮGetter is the go getter method for the defaultˮPrimaryClassˮ property.
	//
	// TSDoc:
	// Default ˮPrimaryClassˮ instance.
	defaultˮPrimaryClassˮGetter() (goˮPrimaryClassˮ, error)
}

// goModuleConstructor creates new goModule instance.
type goModuleConstructor func(vu modules.VU) goModule

// jsˮPrimaryClassˮ is the go binding for the JavaScript ˮPrimaryClassˮ type.
//
// TSDoc:
// This is the primary class of the ˮnameˮ extension.
type jsˮPrimaryClassˮ interface {
	// greetingGetter is the go getter binding for the JavaScript greeting property.
	//
	// TSDoc:
	// Greeting message
	greetingGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// goˮPrimaryClassˮ is the go representation of the JavaScript ˮPrimaryClassˮ type.
//
// TSDoc:
// This is the primary class of the ˮnameˮ extension.
type goˮPrimaryClassˮ interface {
	// greetingGetter is the go getter method for the greeting property.
	//
	// TSDoc:
	// Greeting message
	greetingGetter() (string, error)
}

// jsˮPrimaryClassˮAdapter converts goˮPrimaryClassˮ to jsˮPrimaryClassˮ.
type jsˮPrimaryClassˮAdapter struct {
	adaptee goˮPrimaryClassˮ
}

var _ jsˮPrimaryClassˮ = (*jsˮPrimaryClassˮAdapter)(nil)

// greetingGetter is a jsˮPrimaryClassˮ property getter adapter method.
func (self *jsˮPrimaryClassˮAdapter) greetingGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.greetingGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// goˮPrimaryClassˮAdapter converts goja Object to goˮPrimaryClassˮ.
type goˮPrimaryClassˮAdapter struct {
	adaptee *goja.Object
	vm      *goja.Runtime
}

var _ goˮPrimaryClassˮ = (*goˮPrimaryClassˮAdapter)(nil)

// greetingGetter is a goˮPrimaryClassˮ property getter adapter method.
func (self *goˮPrimaryClassˮAdapter) greetingGetter() (string, error) {
	return self.adaptee.Get("greeting").String(), nil
}

// jsˮPrimaryClassˮTo setup ˮPrimaryClassˮ JavaScript object from jsˮPrimaryClassˮ.
func jsˮPrimaryClassˮTo(src jsˮPrimaryClassˮ, obj *goja.Object, vm *goja.Runtime) error {
	return obj.DefineAccessorProperty("greeting", vm.ToValue(src.greetingGetter), goja.Undefined(), goja.FLAG_FALSE, goja.FLAG_TRUE)
}

// jsˮPrimaryClassˮFrom returns a jsˮPrimaryClassˮ based on a goˮPrimaryClassˮ.
func jsˮPrimaryClassˮFrom(adaptee goˮPrimaryClassˮ) jsˮPrimaryClassˮ {
	return &jsˮPrimaryClassˮAdapter{adaptee: adaptee}
}

// goˮPrimaryClassˮFrom returns a goˮPrimaryClassˮ from goja Object.
func goˮPrimaryClassˮFrom(adaptee *goja.Object, vm *goja.Runtime) goˮPrimaryClassˮ {
	return &goˮPrimaryClassˮAdapter{adaptee: adaptee, vm: vm}
}

// goˮPrimaryClassˮToObject returns a goja Object from goˮPrimaryClassˮ.
func goˮPrimaryClassˮToObject(v goˮPrimaryClassˮ, vm *goja.Runtime) *goja.Object {
	obj := vm.NewObject()

	err := jsˮPrimaryClassˮTo(jsˮPrimaryClassˮFrom(v), obj, vm)
	if err != nil {
		panic(err)
	}

	return obj
}

// goˮPrimaryClassˮConstructor creates new goˮPrimaryClassˮ instance.
type goˮPrimaryClassˮConstructor func(nameArg string) (goˮPrimaryClassˮ, error)

// newˮPrimaryClassˮConstructor creates ˮPrimaryClassˮ JavaScript constructor.
func newˮPrimaryClassˮConstructor(ctor goˮPrimaryClassˮConstructor) func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
	return func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
		adaptee, err := ctor(call.Argument(0).String())
		if err != nil {
			panic(err)
		}

		adapter := jsˮPrimaryClassˮFrom(adaptee)

		if err := jsˮPrimaryClassˮTo(adapter, call.This, vm); err != nil {
			panic(err)
		}

		return nil
	}
}
func goTimeFromDate(v goja.Value, vm *goja.Runtime) time.Time {
	getTime, ok := goja.AssertFunction(v.ToObject(vm).Get("getTime"))
	if !ok {
		panic(fmt.Errorf("%w: getTime", errors.ErrUnsupported))
	}

	ret, err := getTime(v)
	if err != nil {
		panic(err)
	}

	return time.UnixMilli(ret.ToInteger())
}

func jsDateFromTime(t time.Time, vm *goja.Runtime) goja.Value {
	d, err := vm.New(vm.Get("Date"), vm.ToValue(t.UnixMilli()))
	if err != nil {
		panic(err)
	}

	return d
}
